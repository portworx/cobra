    // ----- autogenerated stub. DO NOT EDIT -----
    // fetch global flag values this way
    json := vp.GetBool("/global/json")
	raw := vp.GetBool("/global/raw")
	color := vp.GetBool("/global/color")
	ssl := vp.GetBool("/global/ssl")
	ca := vp.GetString("/global/ca")
	cert := vp.GetString("/global/cert")
	key := vp.GetString("/global/key")
	host := vp.GetString("/global/host")
	port := vp.GetString("/global/port")

// fetch local flag values this way
{{ range $key, $value := .boolStubs -}}
    {{- if eq $value.Persistent true -}}
        {{$value.Name}} := vp.GetBool("{{$.keyPath}}/{{$.cmdName}}/{{$value.Key}}");
    {{- else -}}
        {{$value.Name}} := vp.GetBool("{{$.keyPath}}/{{$.cmdName}}/{{$value.Key}}");
    {{- end }}
    isSet{{$value.Name}} := false
    if cmd.Flag("{{$value.Key}}").Changed {
        isSet{{$value.Name}} = true
    };
{{- end }}
{{- range $key, $value := .strStubs -}}
    {{- if eq $value.Persistent true -}}
        {{$value.Name}} := vp.GetString("{{$.keyPath}}/{{$.cmdName}}/{{$value.Key}}");
    {{- else -}}
        {{$value.Name}} := vp.GetString("{{$.keyPath}}/{{$.cmdName}}/{{$value.Key}}");
    {{- end }}
    isSet{{$value.Name}} := false
    if cmd.Flag("{{$value.Key}}").Changed {
        isSet{{$value.Name}} = true
    };
{{- end }}
{{- range $key, $value := .intStubs -}}
    {{- if eq $value.Persistent true -}}
        {{$value.Name}} := vp.GetInt("{{$.keyPath}}/{{$.cmdName}}/{{$value.Key}}");
    {{- else -}}
        {{$value.Name}} := vp.GetInt("{{$.keyPath}}/{{$.cmdName}}/{{$value.Key}}");
    {{- end }}
    isSet{{$value.Name}} := false
    if cmd.Flag("{{$value.Key}}").Changed {
        isSet{{$value.Name}} = true
    };
{{- end }}
{{- range $key, $value := .uintStubs -}}
    {{- if eq $value.Persistent true -}}
        {{$value.Name}} := uint(vp.GetInt("{{$.keyPath}}/{{$.cmdName}}/{{$value.Key}}"));
    {{- else -}}
        {{$value.Name}} := uint(vp.GetInt("{{$.keyPath}}/{{$.cmdName}}/{{$value.Key}}"));
    {{- end }}
    isSet{{$value.Name}} := false
    if cmd.Flag("{{$value.Key}}").Changed {
        isSet{{$value.Name}} = true
    };
{{- end }}
{{- range $key, $value := .strSliceStubs -}}
    {{- if eq $value.Persistent true -}}
        {{$value.Name}} := vp.GetStringSlice("{{$.keyPath}}/{{$.cmdName}}/{{$value.Key}}");
    {{- else -}}
        {{$value.Name}} := vp.GetStringSlice("{{$.keyPath}}/{{$.cmdName}}/{{$value.Key}}");
    {{- end }}
    isSet{{$value.Name}} := false
    if cmd.Flag("{{$value.Key}}").Changed {
        isSet{{$value.Name}} = true
    };
{{- end }}
{{- range $key, $value := .intSliceStubs -}}
    {{- if eq $value.Persistent true -}}
        {{$value.Name}} := vp.GetIntSlice("{{$.keyPath}}/{{$.cmdName}}/{{$value.Key}}");
    {{- else -}}
        {{$value.Name}} := vp.GetIntSlice("{{$.keyPath}}/{{$.cmdName}}/{{$value.Key}}");
    {{- end }}
    isSet{{$value.Name}} := false
    if cmd.Flag("{{$value.Key}}").Changed {
        isSet{{$value.Name}} = true
    };
{{- end }}

// please remove these lines as and when you use these flag values.
// These are assigned to "_" by default so that the compiler does not complain.

data := new(cli.{{.localStruct}})
// global flags
    data.Global = new(cli.FlagsGlobal)
    data.Global.Json = json
	data.Global.Raw = raw
	data.Global.Color = color
	data.Global.Ssl = ssl
	data.Global.Ca = ca
	data.Global.Cert = cert
	data.Global.Key = key
	data.Global.Host = host
	data.Global.Port = port

// args
data.Args = args

// bool status
status := false
_ = status

// local flags
{{ range $key, $value := .boolStubs -}}
        data.{{$value.Name}} = {{$value.Name}};
        data.IsSet{{$value.Name}} = isSet{{$value.Name}};
{{- end }}
{{- range $key, $value := .strStubs -}}
        {{ $length := len $value.ValidValues }} {{ if ne $length 0 }}
            status = false;
            {{- range $validKey, $validValue := $value.ValidValues -}}
                if {{$value.Name}} == "{{$validValue}}" { status = true };
            {{- end }}
            if !status { return fmt.Errorf("{{$value.Name}} value is not valid. See help") };
        {{- end }}
        data.{{$value.Name}} = {{$value.Name}};
        data.IsSet{{$value.Name}} = isSet{{$value.Name}};
{{- end }}
{{- range $key, $value := .intStubs -}}
        {{ $length := len $value.ValidValues }} {{ if ne $length 0 }}
            status = false;
            {{- range $validKey, $validValue := $value.ValidValues -}}
                if {{$value.Name}} == {{$validValue}} { status = true };
            {{- end }}
            if !status { return fmt.Errorf("{{$value.Name}} value is not valid. See help") };
        {{- end }}
        {{ $length := len $value.ValidRange }} {{ if eq $length 2 }}
            status = false;
            if {{$value.Name}} >= {{index $value.ValidRange 0}} && {{$value.Name}} <= {{index $value.ValidRange 1}} { status = true };
            if !status { return fmt.Errorf("{{$value.Name}} value is not valid. See help") };
        {{- end }}
        data.{{$value.Name}} = {{$value.Name}};
        data.IsSet{{$value.Name}} = isSet{{$value.Name}};
{{- end }}
{{- range $key, $value := .uintStubs -}}
        {{ $length := len $value.ValidValues }} {{ if ne $length 0 }}
            status = false;
            {{- range $validKey, $validValue := $value.ValidValues -}}
                if {{$value.Name}} == {{$validValue}} { status = true };
                {{- end }}
                if !status { return fmt.Errorf("{{$value.Name}} value is not valid. See help") };
            {{- end }}
        {{ $length := len $value.ValidRange }} {{ if eq $length 2 }}
            status = false;
            if {{$value.Name}} >= {{index $value.ValidRange 0}} && {{$value.Name}} <= {{index $value.ValidRange 1}} { status = true };
            if !status { return fmt.Errorf("{{$value.Name}} value is not valid. See help") };
        {{- end }}
        data.{{$value.Name}} = {{$value.Name}};
        data.IsSet{{$value.Name}} = isSet{{$value.Name}};
{{- end }}
{{- range $key, $value := .strSliceStubs -}}
        data.{{$value.Name}} = {{$value.Name}};
        data.IsSet{{$value.Name}} = isSet{{$value.Name}};
{{- end }}
{{- range $key, $value := .intSliceStubs -}}
        data.{{$value.Name}} = {{$value.Name}};
        data.IsSet{{$value.Name}} = isSet{{$value.Name}};
{{- end }}
// ----- end autogenerated stub -----
