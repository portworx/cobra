package cli

// a type is defined for each CLI function in order to pass
// flag values as a type safe transport mechanism.

type Error string

func (e Error) Error() string {
	return string(e)
}

const (
	FlagsNotValidated Error = "flags are not validated"
	InputTypeNotValid Error = "input arg types are not valid"
)

// This is an auto-generated file. Pl. DO NOT EDIT

// GlobalFlagger provides a pointer to global flag object
type GlobalFlagger interface {
    GetGlobal() *FlagsGlobal
}

// SerializerDeserializer provides serialization methods.
// No errors are involved here and that is an intentional design
// choice because this is supposed to work on auto-generated structs
// which are safe to use in these functions.
type SerializerDeserializer interface {
	Serialize() ([]byte, error)
	Deserialize([]byte) error
}

// FlagsGlobal aggregates global flags.
// This is auto-generated. Pl. DO NOT EDIT
type FlagsGlobal struct {
    // global flags
    Json bool
	Raw bool
	Color bool
	Ssl bool
	Ca string
	Cert string
	Key string
	Host string
	Port string
}

func (t *FlagsGlobal) GetGlobal() *FlagsGlobal {
    return t
}

func (t *FlagsGlobal) Serialize() ([]byte, error) {
    return json.Marshal(t)
}

func (t *FlagsGlobal) Deserialize(b []byte) error {
    return json.Unmarshal(b, t)
}

{{.structs}}

// flag2FlagCommonAttributesCopy copies common data fields between two flag types
func flag2FlagCommonAttributesCopy(x, y SerializerDeserializer) error {
        var b []byte
        var err error

        switch v := x.(type) {
        {{- range $key, $value := .typeList }}
        case *{{ $value }}:
            b, err = v.Serialize()
            if err != nil {
                return err
            };
        {{- end }}
        default:
            return InputTypeNotValid
        }

        switch v := y.(type) {
        {{- range $key, $value := .typeList }}
        case *{{ $value }}:
            err = v.Deserialize(b)
            if err != nil {
                return err
            };
        {{- end }}
        default:
             return InputTypeNotValid
        }

        return nil
}
