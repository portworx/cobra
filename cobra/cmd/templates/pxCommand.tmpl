{{comment .copyright}}
{{if .license}}{{comment .license}}{{end}}

// this file is auto-generated. Please DO NOT EDIT

// package {{.cmdPackage}} has CLI command implementations
package {{.cmdPackage}}

import (
	"fmt"
	"github.com/spf13/cobra"
	"github.com/portworx/porx/px/cli/cflags"
	{{ if ne .imports "" }}"{{.imports}}"{{ end }}
)

// all content below this line is auto-generated. Please DO NOT EDIT

// {{.cmdVarName}}Cmd represents the {{.cmdName}} command
var {{.cmdVarName}}Cmd = &cobra.Command{
	Use:   "{{.cmdName}}",
	Short: "{{.short}}",
	Long: `{{.long}}`,
	Aliases: []string{ {{ range $key, $value := .aliases }}"{{ $value }}",{{ end }} },
	Hidden: {{.hidden}},
	RunE: {{.localFunc}},
}

func {{.localFunc}}(cmd *cobra.Command, args []string) error {
	{{ range $key, $value := .boolFlags -}}
		{{- if eq $value.Persistent true -}}
			vp.BindPFlag("/persistent/{{$value.Name}}", cmd.PersistentFlags().Lookup("{{$value.Name}}"));
			vp.SetDefault("/persistent/{{$value.Name}}", {{$value.Default}});
		{{- else -}}
			vp.BindPFlag("{{$.keyPath}}/{{$.cmdName}}/local/{{$value.Name}}", cmd.Flags().Lookup("{{$value.Name}}"));
			vp.SetDefault("{{$.keyPath}}/{{$.cmdName}}/local/{{$value.Name}}", {{$value.Default}});
		{{- end }}
	{{- end }}
	{{- range $key, $value := .strFlags -}}
		{{- if eq $value.Persistent true -}}
			vp.BindPFlag("/persistent/{{$value.Name}}", cmd.PersistentFlags().Lookup("{{$value.Name}}"));
			vp.SetDefault("/persistent/{{$value.Name}}", "{{$value.Default}}");
		{{- else -}}
			vp.BindPFlag("{{$.keyPath}}/{{$.cmdName}}/local/{{$value.Name}}", cmd.Flags().Lookup("{{$value.Name}}"));
			vp.SetDefault("{{$.keyPath}}/{{$.cmdName}}/local/{{$value.Name}}", "{{$value.Default}}");
		{{- end }}
	{{- end }}
	{{- range $key, $value := .intFlags -}}
		{{- if eq $value.Persistent true -}}
			vp.BindPFlag("/persistent/{{$value.Name}}", cmd.PersistentFlags().Lookup("{{$value.Name}}"));
			vp.SetDefault("/persistent/{{$value.Name}}", {{$value.Default}});
		{{- else -}}
			vp.BindPFlag("{{$.keyPath}}/{{$.cmdName}}/local/{{$value.Name}}", cmd.Flags().Lookup("{{$value.Name}}"));
			vp.SetDefault("{{$.keyPath}}/{{$.cmdName}}/local/{{$value.Name}}", {{$value.Default}});
		{{- end }}
	{{- end }}
	{{- range $key, $value := .uintFlags -}}
		{{- if eq $value.Persistent true -}}
			vp.BindPFlag("/persistent/{{$value.Name}}", cmd.PersistentFlags().Lookup("{{$value.Name}}"));
			vp.SetDefault("/persistent/{{$value.Name}}", {{$value.Default}});
		{{- else -}}
			vp.BindPFlag("{{$.keyPath}}/{{$.cmdName}}/local/{{$value.Name}}", cmd.Flags().Lookup("{{$value.Name}}"));
			vp.SetDefault("{{$.keyPath}}/{{$.cmdName}}/local/{{$value.Name}}", {{$value.Default}});
		{{- end }}
	{{- end }}
	{{- range $key, $value := .strSliceFlags -}}
		{{- if eq $value.Persistent true -}}
			vp.BindPFlag("/persistent/{{$value.Name}}", cmd.PersistentFlags().Lookup("{{$value.Name}}"));
			vp.SetDefault("/persistent/{{$value.Name}}", nil);
		{{- else -}}
			vp.BindPFlag("{{$.keyPath}}/{{$.cmdName}}/local/{{$value.Name}}", cmd.Flags().Lookup("{{$value.Name}}"));
			vp.SetDefault("{{$.keyPath}}/{{$.cmdName}}/local/{{$value.Name}}", nil);
		{{- end }}
	{{- end }}
	{{- range $key, $value := .intSliceFlags -}}
		{{- if eq $value.Persistent true -}}
			vp.BindPFlag("/persistent/{{$value.Name}}", cmd.PersistentFlags().Lookup("{{$value.Name}}"));
			vp.SetDefault("/persistent/{{$value.Name}}", nil);
		{{- else -}}
			vp.BindPFlag("{{$.keyPath}}/{{$.cmdName}}/local/{{$value.Name}}", cmd.Flags().Lookup("{{$value.Name}}"));
			vp.SetDefault("{{$.keyPath}}/{{$.cmdName}}/local/{{$value.Name}}", nil);
		{{- end }}
	{{- end }}

        {{.dataStubs}}
        {{ if eq .inputInterface true -}}
        vp.Set("args", args)
        provider, err := cflags.NewViperProvider(cmd, vp, "{{$.keyPath}}/{{$.cmdName}}/local")
        if err != nil {
            return err
        }
        return {{.func}}(data, provider)
        {{ else }}
        // populate fields for data type specific for this func
        	return {{.func}}(data)
        {{ end }}
}

func init() {
	{{.parentName}}.AddCommand({{.cmdVarName}}Cmd)

	// these flags are auto-generated, please DO NOT EDIT


	{{ range $key, $value := .boolFlags -}}
		{{- if eq $value.Persistent true -}}
			{{- if eq $value.Short "" -}}
				{{$.cmdVarName}}Cmd.PersistentFlags().Bool("{{$value.Name}}", {{$value.Default}}, "{{$value.Use}}");
			{{- else -}}
				{{$.cmdVarName}}Cmd.PersistentFlags().BoolP("{{$value.Name}}", "{{$value.Short}}", {{$value.Default}}, "{{$value.Use}}");
			{{- end }}
			{{- if eq $value.Hidden true -}}
				{{$.cmdVarName}}Cmd.PersistentFlags().MarkHidden("{{$value.Name}}");
			{{- end }}
		{{- else -}}
			{{- if eq $value.Short "" -}}
				{{$.cmdVarName}}Cmd.Flags().Bool("{{$value.Name}}", {{$value.Default}}, "{{$value.Use}}");
			{{- else -}}
				{{$.cmdVarName}}Cmd.Flags().BoolP("{{$value.Name}}", "{{$value.Short}}", {{$value.Default}}, "{{$value.Use}}");
			{{- end }}
			{{- if eq $value.Hidden true -}}
				{{$.cmdVarName}}Cmd.Flags().MarkHidden("{{$value.Name}}");
			{{- end }}
		{{- end }}
	{{- end }}
	{{- range $key, $value := .strFlags -}}
		{{- if eq $value.Persistent true -}}
			{{- if eq $value.Short "" -}}
				{{$.cmdVarName}}Cmd.PersistentFlags().String("{{$value.Name}}", "{{$value.Default}}", "{{$value.Use}}");
			{{- else -}}
				{{$.cmdVarName}}Cmd.PersistentFlags().StringP("{{$value.Name}}", "{{$value.Short}}", "{{$value.Default}}", "{{$value.Use}}");
			{{- end }}
			{{- if eq $value.Hidden true -}}
				{{$.cmdVarName}}Cmd.PersistentFlags().MarkHidden("{{$value.Name}}");
			{{- end }}
		{{- else -}}
			{{- if eq $value.Short "" -}}
				{{$.cmdVarName}}Cmd.Flags().String("{{$value.Name}}", "{{$value.Default}}", "{{$value.Use}}");
			{{- else -}}
				{{$.cmdVarName}}Cmd.Flags().StringP("{{$value.Name}}", "{{$value.Short}}", "{{$value.Default}}", "{{$value.Use}}");
			{{- end }}
			{{- if eq $value.Hidden true -}}
				{{$.cmdVarName}}Cmd.Flags().MarkHidden("{{$value.Name}}");
			{{- end }}
		{{- end }}
	{{- end }}
	{{- range $key, $value := .intFlags -}}
		{{- if eq $value.Persistent true -}}
			{{- if eq $value.Short "" -}}
				{{$.cmdVarName}}Cmd.PersistentFlags().Int("{{$value.Name}}", {{$value.Default}}, "{{$value.Use}}");
			{{- else -}}
				{{$.cmdVarName}}Cmd.PersistentFlags().IntP("{{$value.Name}}", "{{$value.Short}}", {{$value.Default}}, "{{$value.Use}}");
			{{- end }}
			{{- if eq $value.Hidden true -}}
				{{$.cmdVarName}}Cmd.PersistentFlags().MarkHidden("{{$value.Name}}");
			{{- end }}
		{{- else -}}
			{{- if eq $value.Short "" -}}
				{{$.cmdVarName}}Cmd.Flags().Int("{{$value.Name}}", {{$value.Default}}, "{{$value.Use}}");
			{{- else -}}
				{{$.cmdVarName}}Cmd.Flags().IntP("{{$value.Name}}", "{{$value.Short}}", {{$value.Default}}, "{{$value.Use}}");
			{{- end }}
			{{- if eq $value.Hidden true -}}
				{{$.cmdVarName}}Cmd.Flags().MarkHidden("{{$value.Name}}");
			{{- end }}
		{{- end }}
	{{- end }}
	{{- range $key, $value := .uintFlags -}}
		{{- if eq $value.Persistent true -}}
			{{- if eq $value.Short "" -}}
				{{$.cmdVarName}}Cmd.PersistentFlags().Uint("{{$value.Name}}", {{$value.Default}}, "{{$value.Use}}");
			{{- else -}}
				{{$.cmdVarName}}Cmd.PersistentFlags().UintP("{{$value.Name}}", "{{$value.Short}}", {{$value.Default}}, "{{$value.Use}}");
			{{- end }}
			{{- if eq $value.Hidden true -}}
				{{$.cmdVarName}}Cmd.PersistentFlags().MarkHidden("{{$value.Name}}");
			{{- end }}
		{{- else -}}
			{{- if eq $value.Short "" -}}
				{{$.cmdVarName}}Cmd.Flags().Uint("{{$value.Name}}", {{$value.Default}}, "{{$value.Use}}");
			{{- else -}}
				{{$.cmdVarName}}Cmd.Flags().UintP("{{$value.Name}}", "{{$value.Short}}", {{$value.Default}}, "{{$value.Use}}");
			{{- end }}
			{{- if eq $value.Hidden true -}}
				{{$.cmdVarName}}Cmd.Flags().MarkHidden("{{$value.Name}}");
			{{- end }}
		{{- end }}
	{{- end }}
	{{- range $key, $value := .strSliceFlags -}}
		{{- if eq $value.Persistent true -}}
			{{- if eq $value.Short "" -}}
				{{$.cmdVarName}}Cmd.PersistentFlags().StringSlice("{{$value.Name}}", nil, "{{$value.Use}}");
			{{- else -}}
				{{$.cmdVarName}}Cmd.PersistentFlags().StringSliceP("{{$value.Name}}", "{{$value.Short}}", nil, "{{$value.Use}}");
			{{- end }}
			{{- if eq $value.Hidden true -}}
				{{$.cmdVarName}}Cmd.PersistentFlags().MarkHidden("{{$value.Name}}");
			{{- end }}
		{{- else -}}
			{{- if eq $value.Short "" -}}
				{{$.cmdVarName}}Cmd.Flags().StringSlice("{{$value.Name}}", nil, "{{$value.Use}}");
			{{- else -}}
				{{$.cmdVarName}}Cmd.Flags().StringSliceP("{{$value.Name}}", "{{$value.Short}}", nil, "{{$value.Use}}");
			{{- end }}
			{{- if eq $value.Hidden true -}}
				{{$.cmdVarName}}Cmd.Flags().MarkHidden("{{$value.Name}}");
			{{- end }}
		{{- end }}
	{{- end }}
	{{- range $key, $value := .intSliceFlags -}}
		{{- if eq $value.Persistent true -}}
			{{- if eq $value.Short "" -}}
				{{$.cmdVarName}}Cmd.PersistentFlags().IntSlice("{{$value.Name}}", nil, "{{$value.Use}}");
			{{- else -}}
				{{$.cmdVarName}}Cmd.PersistentFlags().IntSliceP("{{$value.Name}}", "{{$value.Short}}", nil, "{{$value.Use}}");
			{{- end }}
			{{- if eq $value.Hidden true -}}
				{{$.cmdVarName}}Cmd.PersistentFlags().MarkHidden("{{$value.Name}}");
			{{- end }}
		{{- else -}}
			{{- if eq $value.Short "" -}}
				{{$.cmdVarName}}Cmd.Flags().IntSlice("{{$value.Name}}", nil, "{{$value.Use}}");
			{{- else -}}
				{{$.cmdVarName}}Cmd.Flags().IntSliceP("{{$value.Name}}", "{{$value.Short}}", nil, "{{$value.Use}}");
			{{- end }}
			{{- if eq $value.Hidden true -}}
				{{$.cmdVarName}}Cmd.Flags().MarkHidden("{{$value.Name}}");
			{{- end }}
		{{- end }}
	{{- end }}
}